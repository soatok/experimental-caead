const expect = require('chai').expect;
const crypto = require('crypto');
const {crypto_caead_decrypt, crypto_caead_encrypt} = require('../index');

describe('Public API', function() {
    it('Encrypt / Decrypt', async function() {
        const message = Buffer.from('Soatok Dreamseeker thinks you are cool', 'utf-8');
        const key = crypto.randomBytes(32);
        const nonce = crypto.randomBytes(32);

        const encrypted = await crypto_caead_encrypt(message, nonce, key);
        const decrypted = await crypto_caead_decrypt(encrypted, nonce, key);
        expect(Buffer.from(decrypted).toString('hex'))
            .to.be.equal(message.toString('hex'));

        encrypted[0] = (encrypted[0] ^ 0x13) & 0xff; // Flip some bits
        let thrown = false;
        let exception = '';
        try {
            await crypto_caead_decrypt(encrypted, nonce, key);
        } catch (e) {
            thrown = true;
            exception = e.message;
        }
        expect(true).to.be.equal(thrown, 'Invalid MAC accepted');
        expect('Invalid authentication tag').to.be.equal(exception);
    });

    it('Test Vector #1 (NUL key, NUL nonce, no plaintext, no AAD)', async function () {
        const pt = new Uint8Array(0);
        const key = new Uint8Array(32);
        const nonce = new Uint8Array(32);
        const aad = new Uint8Array(0);
        const ct = await crypto_caead_encrypt(pt, nonce, key, aad);
        const expectedHex =
            'ae9c798b04ff9842d7acd1783c75456fd95f70a733ba49bee4f866284f9efe5b';
        expect(expectedHex).to.be.equal(Buffer.from(ct).toString('hex'));
    });

    it('Test Vector #2 (No Plaintext, No AAD)', async function () {
        const pt = new Uint8Array([]);
        const key = new Uint8Array([
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
            0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
        ]);
        const nonce = new Uint8Array([
            0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
            0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f
        ]);
        const aad = new Uint8Array([]);
        const ct = await crypto_caead_encrypt(pt, nonce, key, aad);
        const expectedHex =
            'dc28ec9b28082f605603d013958aa4f549b526266f851cc8c5857b6fec331fda';
        expect(expectedHex).to.be.equal(Buffer.from(ct).toString('hex'));
    });

    it('Test Vector #3 (Plaintext, No AAD)', async function () {
        const pt = new Uint8Array([
            0x54, 0x68, 0x65, 0x20, 0x64, 0x68, 0x6f, 0x6c, 0x65, 0x20, 0x28, 0x70, 0x72, 0x6f, 0x6e, 0x6f,
            0x75, 0x6e, 0x63, 0x65, 0x64, 0x20, 0x22, 0x64, 0x6f, 0x6c, 0x65, 0x22, 0x29, 0x20, 0x69, 0x73,
            0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x74,
            0x68, 0x65, 0x20, 0x41, 0x73, 0x69, 0x61, 0x74, 0x69, 0x63, 0x20, 0x77, 0x69, 0x6c, 0x64, 0x20,
            0x64, 0x6f, 0x67, 0x2c, 0x20, 0x72, 0x65, 0x64, 0x20, 0x64, 0x6f, 0x67, 0x2c, 0x20, 0x61, 0x6e,
            0x64, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x6f, 0x67, 0x2e,
            0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65,
            0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x47, 0x65, 0x72, 0x6d, 0x61,
            0x6e, 0x20, 0x73, 0x68, 0x65, 0x70, 0x68, 0x65, 0x72, 0x64, 0x20, 0x62, 0x75, 0x74, 0x20, 0x6c,
            0x6f, 0x6f, 0x6b, 0x73, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x61,
            0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x2d, 0x6c, 0x65, 0x67, 0x67, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x78,
            0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x79, 0x20, 0x65, 0x6c,
            0x75, 0x73, 0x69, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x65,
            0x64, 0x20, 0x6a, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6c, 0x61, 0x73,
            0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x77, 0x6f, 0x6c, 0x76,
            0x65, 0x73, 0x2c, 0x20, 0x63, 0x6f, 0x79, 0x6f, 0x74, 0x65, 0x73, 0x2c, 0x20, 0x6a, 0x61, 0x63,
            0x6b, 0x61, 0x6c, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x6f, 0x78, 0x65, 0x73, 0x20,
            0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
            0x20, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x43, 0x61, 0x6e, 0x69, 0x64, 0x61, 0x65, 0x2e
        ]);
        const key = new Uint8Array([
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
            0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
        ]);
        const nonce = new Uint8Array([
            0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
            0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f
        ]);
        const aad = new Uint8Array([]);
        const ct = await crypto_caead_encrypt(pt, nonce, key, aad);
        const expectedHex =
            '2fc80f8922a108718c6b78ada014c7edd11bf58fc879f4ca5a6b2f3925c813f8' +
            'fe2e2ec7a355abb6e7882de5f8abf526c74be8c743c0f977bc26053389de51e8' +
            'adc156033dfb201d0965e88d4ed9e73b518b8da326786b5b2a9c9ea3522f94c7' +
            'd2b64d10fc9ce1cd359769552b6e5ebfe1e57b604c95cd2e360d2da16b3caf0a' +
            '1e1a72a480f32ee9aad8d80e5cc57d75c92a8eab61dcda2a64f1bd637a054584' +
            '4de86ffc9084b96b6207c1d92d2b5cb3ce337e63e5f80237bd297e2a532dd618' +
            '7c260b2107c7030083b29b6551226d83ed3677f8551aed434121ceb8dc44f451' +
            'b8042e17f315f2bda85eb1d4c0b3abe68b9514db3fe6be3881d88bbaefed2f4f' +
            '6cc9fec332022a1cec7a8897578891e9694e514980d15e161931cc2dfc5f0d8a' +
            '21719793fecbb6ca494f70be1ba5d30dbe59bcdac3b17884954b511128ec8cf7' +
            '9e632eb8fc8f53569a8c4ef83934fcd6';
        expect(expectedHex).to.be.equal(Buffer.from(ct).toString('hex'));
    });

    it('Test Vector #4 (AAD, No plaintext)', async function () {
        const pt = new Uint8Array([]);
        const key = new Uint8Array([
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
            0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
        ]);
        const nonce = new Uint8Array([
            0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
            0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f
        ]);
        const aad = new Uint8Array([
            0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
            0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
            0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
        ]);
        const ct = await crypto_caead_encrypt(pt, nonce, key, aad);
        const expectedHex =
            '6324c31908d5234b9e8c8dad7d0fdcfab8c86a7c8b18c8de37134d0089acbc13';
        expect(expectedHex).to.be.equal(Buffer.from(ct).toString('hex'));
    });

    it('Test Vector #5 (Plaintext, AAD)', async function () {
        const pt = new Uint8Array([
            0x54, 0x68, 0x65, 0x20, 0x64, 0x68, 0x6f, 0x6c, 0x65, 0x20, 0x28, 0x70, 0x72, 0x6f, 0x6e, 0x6f,
            0x75, 0x6e, 0x63, 0x65, 0x64, 0x20, 0x22, 0x64, 0x6f, 0x6c, 0x65, 0x22, 0x29, 0x20, 0x69, 0x73,
            0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x74,
            0x68, 0x65, 0x20, 0x41, 0x73, 0x69, 0x61, 0x74, 0x69, 0x63, 0x20, 0x77, 0x69, 0x6c, 0x64, 0x20,
            0x64, 0x6f, 0x67, 0x2c, 0x20, 0x72, 0x65, 0x64, 0x20, 0x64, 0x6f, 0x67, 0x2c, 0x20, 0x61, 0x6e,
            0x64, 0x20, 0x77, 0x68, 0x69, 0x73, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x6f, 0x67, 0x2e,
            0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65,
            0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x47, 0x65, 0x72, 0x6d, 0x61,
            0x6e, 0x20, 0x73, 0x68, 0x65, 0x70, 0x68, 0x65, 0x72, 0x64, 0x20, 0x62, 0x75, 0x74, 0x20, 0x6c,
            0x6f, 0x6f, 0x6b, 0x73, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x61,
            0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x2d, 0x6c, 0x65, 0x67, 0x67, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x78,
            0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x79, 0x20, 0x65, 0x6c,
            0x75, 0x73, 0x69, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x65,
            0x64, 0x20, 0x6a, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6c, 0x61, 0x73,
            0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x77, 0x6f, 0x6c, 0x76,
            0x65, 0x73, 0x2c, 0x20, 0x63, 0x6f, 0x79, 0x6f, 0x74, 0x65, 0x73, 0x2c, 0x20, 0x6a, 0x61, 0x63,
            0x6b, 0x61, 0x6c, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x6f, 0x78, 0x65, 0x73, 0x20,
            0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
            0x20, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x43, 0x61, 0x6e, 0x69, 0x64, 0x61, 0x65, 0x2e
        ]);
        const key = new Uint8Array([
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
            0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
        ]);
        const nonce = new Uint8Array([
            0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
            0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f
        ]);
        const aad = new Uint8Array([
            0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
            0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
            0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
        ]);
        const ct = await crypto_caead_encrypt(pt, nonce, key, aad);
        const expectedHex =
            '4a29b2418efbef1e0a7b6576a363b3ef05beb42fd789c0b9b371866f6c66dfd9' +
            'fe2e2ec7a355abb6e7882de5f8abf526c74be8c743c0f977bc26053389de51e8' +
            'adc156033dfb201d0965e88d4ed9e73b518b8da326786b5b2a9c9ea3522f94c7' +
            'd2b64d10fc9ce1cd359769552b6e5ebfe1e57b604c95cd2e360d2da16b3caf0a' +
            '1e1a72a480f32ee9aad8d80e5cc57d75c92a8eab61dcda2a64f1bd637a054584' +
            '4de86ffc9084b96b6207c1d92d2b5cb3ce337e63e5f80237bd297e2a532dd618' +
            '7c260b2107c7030083b29b6551226d83ed3677f8551aed434121ceb8dc44f451' +
            'b8042e17f315f2bda85eb1d4c0b3abe68b9514db3fe6be3881d88bbaefed2f4f' +
            '6cc9fec332022a1cec7a8897578891e9694e514980d15e161931cc2dfc5f0d8a' +
            '21719793fecbb6ca494f70be1ba5d30dbe59bcdac3b17884954b511128ec8cf7' +
            '9e632eb8fc8f53569a8c4ef83934fcd6';
        expect(expectedHex).to.be.equal(Buffer.from(ct).toString('hex'));
    });
});
